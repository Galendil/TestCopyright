#!/usr/bin/env python3

from __future__ import with_statement
from colorama import Fore, Back, Style
import os
import re
import shutil
import subprocess
import sys
import tempfile


def system(*args, **kwargs):
    kwargs.setdefault('stdout', subprocess.PIPE)
    proc = subprocess.Popen(args, **kwargs)
    out, err = proc.communicate()
    return out
    


def main():

    allModifiedFiles = system('git', 'status', '--porcelain').decode('utf-8')
    REmodifiedCpp = re.compile('^[AM]+\s+(?P<name>.*\.cpp)', re.MULTILINE)
    REmodifiedH = re.compile('^[AM]+\s+(?P<name>.*\.h)', re.MULTILINE)

    # We get all the .h and .cpp files ready for the hook
    modifiedHookedFiles = REmodifiedCpp.findall(allModifiedFiles)
    modifiedHookedFiles = modifiedHookedFiles + REmodifiedH.findall(allModifiedFiles)
    
    # Regular expressions used for the hooks
    REcopyright = re.compile("^// Copyright 2018 Praxinos, Inc. All Rights Reserved.")
    REtabulations = re.compile(".*\t")
    REtrailingSpaces = re.compile(".* $")
    REemptyLine = re.compile("\n$")
    
    #We print each file concerned by the hook, followed by the modifications done on it
    print("Files hooked:")

    for filename in modifiedHookedFiles:
        print("\n" + filename)
        # Read in the file
        with open(filename, 'r') as file :
            filedata = file.read()

        #HOOK CONDITIONS ----------------------------------------

        ## Checking the copyright
        if not( REcopyright.match(filedata) ) :
            print(Back.GREEN + '    ---- Line 1 - Adding the copyright' + Style.RESET_ALL)
            filedata = "// Copyright 2018 Praxinos, Inc. All Rights Reserved. \n" + filedata

            
        ## Checking the last empty line
        if not( REemptyLine.match(filedata) ) :
            print(Back.GREEN + '    ---- Adding an empty line at the end of the file' + Style.RESET_ALL)
            filedata = filedata + "\n"


        ## Replacing tabulations by four spaces (Check later if need to be more accurate than this, like replacing only tabulation at the beginning of lines, for example)
        splits = filedata.split("\n")
        filedata = ""
        for id,split in enumerate(splits):
        
            if not (id == 0):
                filedata = filedata + "\n"
                
            if( REtabulations.match(split) ):
                split = split.replace("\t", "    ")
                print(Back.YELLOW + '    ---- Line ' + str (id+1) + ' - Replacing tabulations with spaces' + Style.RESET_ALL)
                
            filedata = filedata + split
        

        ## Removing trailing spaces
        splits = filedata.split("\n")
        filedata = ""
        for id,split in enumerate(splits):
        
            if not (id == 0):
                filedata = filedata + "\n"
                
            if( REtrailingSpaces.match(split) ):
                split = split.rstrip()
                print(Back.RED + '    ---- Line ' + str (id+1) + ' - Removing trailing spaces' + Style.RESET_ALL)
        
            filedata = filedata + split

        #-------------------------------------------------------

        # Write the file out again
        with open(filename, 'w') as file:
            file.write(filedata)
        system( 'git', 'add', filename )


    sys.exit(0)


if __name__ == '__main__':
    main()
