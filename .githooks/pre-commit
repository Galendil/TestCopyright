#!/usr/bin/env python3

from __future__ import with_statement
from colorama import Fore, Back, Style
import os
import re
import shutil
import subprocess
import sys
import tempfile


def system(*args, **kwargs):
    kwargs.setdefault('stdout', subprocess.PIPE)
    proc = subprocess.Popen(args, **kwargs)
    out, err = proc.communicate()
    return out


def main():

    allModifiedFiles = system('git', 'status', '--porcelain').decode('utf-8')
    modifiedCpp = re.compile('^[AM]+\s+(?P<name>.*\.cpp)', re.MULTILINE)
    modifiedH = re.compile('^[AM]+\s+(?P<name>.*\.h)', re.MULTILINE)

    # We get all the .h and .cpp files ready for the hook
    modifiedHookedFiles = modifiedCpp.findall(allModifiedFiles)
    modifiedHookedFiles = modifiedHookedFiles + modifiedH.findall(allModifiedFiles)
    
    #We print all the files concerned by the hook
    print("Files to check")

    for filename in modifiedHookedFiles:
        print(filename)
        # Read in the file
        with open(filename, 'r') as file :
            filedata = file.read()

        #HOOK CONDITIONS ----------------------------------------

        ## Checking the copyright
        REcopyright = re.compile("^// Copyright 2018 Praxinos, Inc. All Rights Reserved.")
        if not( REcopyright.match(filedata) ) :
            print(Back.GREEN + '    ---- Correction of the copyright')
            filedata = "// Copyright 2018 Praxinos, Inc. All Rights Reserved. \n" + filedata

        ## Adding comments before any printf statement ?? //Warning but commit anyway
        #filedata = filedata.replace('printf', '//printf') #not enough

        ## Replacing tabulations by four spaces
        filedata = filedata.replace('\t', '    ')
        print(Back.CYAN + '    ---- Replacing tabulations with spaces')

        #-------------------------------------------------------

        # Write the file out again
        with open(filename, 'w') as file:
            file.write(filedata)
        system( 'git', 'add', filename )

    print("It worked")
    sys.exit(0)


if __name__ == '__main__':
    main()
