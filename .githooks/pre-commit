#!/usr/bin/env python3

from __future__ import with_statement
from colorama import Fore, Back, Style
import os
import re
import shutil
import subprocess
import sys
import tempfile


def system(*args, **kwargs):
    kwargs.setdefault('stdout', subprocess.PIPE)
    proc = subprocess.Popen(args, **kwargs)
    out, err = proc.communicate()
    return out
    


def main():
    print ("Starting hooks --------------------------------------\n ")

    allModifiedFiles = system('git', 'status', '--porcelain').decode('utf-8')

    REmodifiedOdysseyCpp = re.compile('^[AM]+\s+(?P<name>Engine/Source/Odyssey.*\.cpp)', re.MULTILINE)
    REmodifiedOdysseyH = re.compile('^[AM]+\s+(?P<name>Engine/Source/Odyssey.*\.h)', re.MULTILINE)
    
    REmodifiedUnrealCpp = re.compile('^[AM]+\s+(?P<name>Engine/Source.*\.cpp)', re.MULTILINE)
    REmodifiedUnrealCs = re.compile('^[AM]+\s+(?P<name>Engine/Source.*\.cs)', re.MULTILINE)
    REmodifiedUnrealH = re.compile('^[AM]+\s+(?P<name>Engine/Source.*\.h)', re.MULTILINE)
    
    # We get all the .h and .cpp files ready for the hook in Odyssey
    modifiedOdysseyHookedFiles = REmodifiedOdysseyCpp.findall(allModifiedFiles) + REmodifiedOdysseyH.findall(allModifiedFiles)
    
    # We get all the .h and .cpp and .cs files ready for the hook in Unreal
    modifiedUnrealHookedFiles = list(set(REmodifiedUnrealCpp.findall(allModifiedFiles) + REmodifiedUnrealCs.findall(allModifiedFiles) + REmodifiedOdysseyH.findall(allModifiedFiles)) - set(modifiedOdysseyHookedFiles))
    
    # Regular expressions used for the hooks
    REcopyright = re.compile("^// Copyright 2018 Praxinos, Inc. All Rights Reserved.")
    REtabulations = re.compile(".*\t")
    REtrailingSpaces = re.compile(".* $")
    
    #We print each file concerned by the hook, followed by the modifications done on it
    print("Odyssey files hooked:")
    if (len(modifiedOdysseyHookedFiles) == 0):
        print( "\nNONE\n")
    for filename in modifiedOdysseyHookedFiles:
        print("\n" + filename)
        # Read in the file
        with open(filename, 'r') as file :
            filedata = file.read()

        #ODYSSEY HOOK CHECKS ------------------------------------------------------------------------------------------------------------

        ## Checking the copyright
        if not( REcopyright.match(filedata) ) :
            print(Back.GREEN + '    ---- Line 1 - Adding the copyright' + Style.RESET_ALL)
            filedata = "// Copyright 2018 Praxinos, Inc. All Rights Reserved. \n" + filedata

            
        ## Checking the last empty line
        if not( filedata[-1:] == "\n" ) :
            print(Back.GREEN + '    ---- Adding an empty line at the end of the file' + Style.RESET_ALL)
            filedata = filedata + "\n"


        ## Replacing tabulations by four spaces (Check later if need to be more accurate than this, like replacing only tabulation at the beginning of lines, for example)
        splits = filedata.split("\n")
        filedata = ""
        for id,split in enumerate(splits):
        
            if not (id == 0):
                filedata = filedata + "\n"
                
            if( REtabulations.match(split) ):
                split = split.replace("\t", "    ")
                print(Back.YELLOW + '    ---- Line ' + str (id+1) + ' - Replacing tabulations with spaces' + Style.RESET_ALL)
                
            filedata = filedata + split
        

        ## Removing trailing spaces
        splits = filedata.split("\n")
        filedata = ""
        for id,split in enumerate(splits):
        
            if not (id == 0):
                filedata = filedata + "\n"
                
            if( REtrailingSpaces.match(split) ):
                split = split.rstrip()
                print(Back.RED + '    ---- Line ' + str (id+1) + ' - Removing trailing spaces' + Style.RESET_ALL)
        
            filedata = filedata + split

        #--------------------------------------------------------------------------------------------------------------------------------

        # Write the file out again
        with open(filename, 'w') as file:
            file.write(filedata)
        system( 'git', 'add', filename )

        
        
    print("Unreal files hooked:")
    if (len(modifiedUnrealHookedFiles) == 0):
        print( "\nNONE")
    for filename in modifiedUnrealHookedFiles:
        print("\n" + filename)
    


        
        # Read in the file
        with open(filename, 'r') as file :
            filedata = file.read()
            
        #UNREAL HOOK CHECKS -------------------------------------------------------------------------------------------------------------
        
        #Change balise hook : //PRAXINOS: CHANGED BEGIN and //PRAXINOS: CHANGED END
        #We keep the diff and we do a regex to isolate chunks of changes, so we can add the balises at the right spots
        REdiff = re.compile('(?P<diff>@@.*@@[^@]*)')
        diffModifiedFileRaw = system('git', 'diff', '--cached', filename ).decode('utf-8') #The raw diff
        diffModifiedFileParsed = REdiff.findall(diffModifiedFileRaw) #The diff where only the chunks of changes are conserved

        #The regex to get the line where the chunk of changes begins and the number of lines of the chunk
        REbeginLines = re.compile('@@.*\+(?P<number>[0-9]+),[0-9]+ @@', re.MULTILINE)
        REnumberLines = re.compile('@@.*\+[0-9]+,(?P<number>[0-9]+) @@', re.MULTILINE)
        
        beginLines = list(map(int, REbeginLines.findall(diffModifiedFileRaw))) #The lines at which we except a balise //PRAXINOS: CHANGED BEGIN
        numberLines = list(map(int,REnumberLines.findall(diffModifiedFileRaw))) #The number of lines of the diff output
        endLines = beginLines.copy() #The lines at which we except a balise //PRAXINOS: CHANGED END
        
        REremovedLine = re.compile('-.*')
        REaddedLine = re.compile('\+.*')

        print(beginLines)
        print(numberLines)
        
        
        
        for id,diff in enumerate(diffModifiedFileParsed):
            diff = diff.split("\n")
            encounteredDiff = False
            beginLines[id]-=1 #We compensate the first line of the diff which gives us the infos of the number of lines
            countLine = beginLines[id]
            for line in diff:
                print("begin:" + str(beginLines[id]))
                print("end:" + str(endLines[id]))
                print(line)
                if( REremovedLine.match(line) ) and not (encounteredDiff):
                    encounteredDiff = True
                    endLines[id]=beginLines[id]
                    countLine-=1
                elif( REremovedLine.match(line) ) and (encounteredDiff):
                    countLine-=1
                elif( REaddedLine.match(line) ) and not (encounteredDiff):
                    beginLines[id]+=1
                    endLines[id]=beginLines[id]
                    encounteredDiff = True
                elif( REaddedLine.match(line) ) and (encounteredDiff):
                    endLines[id]=countLine
                elif not (encounteredDiff):
                    beginLines[id]+=1
                 
                countLine+=1
                    

        

        

        
        #--------------------------------------------------------------------------------------------------------------------------------

        # Write the file out again
        with open(filename, 'w') as file:
            file.write(filedata)
        system( 'git', 'add', filename )

        
    print ("\nEnding hooks ---------------------------------------- ")
    sys.exit(0)


if __name__ == '__main__':
    main()